'''
# Citation: Under Revision
# Email: qususu@cibr.ac.cn
# Date: 2023-07-28
# We conducted the drug set enrichment analysis (hypergeometric test) to support that our results found by our approach were indeed relevant for ADHD.
# Detailed methods please refer to our article.
# All data was processed via Python 3.8.3 according to the following steps to calculate the P-value.
# This file contains the following steps:
        1.Read different drug datasets
        2.Calculate the P-value based on the formula

# By the way, function phyper() in R can also be used to calculate the P-value, which is equal to our results generated by above steps in Python.
        R: phyper(m,M,(N-M),n,lower.tail=F)
'''

import os
import numpy as np
import pandas as pd 

base_dir = './mp_drug/'
current_adhd_drug_df = pd.read_csv(os.path.join(base_dir,'current_adhd_drug_chembl.csv'), sep=',')
current_adhd_drug_lst = [ele.upper().strip() for ele in current_adhd_drug_df['Drug Name'].tolist()]
drug_in_clinical_test_df = pd.read_csv(os.path.join(base_dir,'drug_in_clinical_test.csv'), sep=',')
drug_in_clinical_test_lst = [ele.upper() for ele in drug_in_clinical_test_df['drugName'].tolist()]
gwas_drug_df = pd.read_csv(os.path.join(base_dir,'gwas_drug.csv'), sep=',')
gwas_drug_lst = [str(ele).upper() for ele in gwas_drug_df['drugName'].tolist()]
multi_level_drug_df = pd.read_csv(os.path.join(base_dir,'multi_level_drug.csv'), sep=',')
multi_level_drug_lst = [str(ele).upper() for ele in multi_level_drug_df['drugName'].tolist()]

#print(len(current_adhd_drug_lst), len(drug_in_clinical_test_lst), len(gwas_drug_lst), len(multi_level_drug_lst))

#release version: CHEMBL30, http://doi.org/10.6019/CHEMBL.database.30) which has 12,854 drugs and compounds
N = 12854
M = len(set(current_adhd_drug_lst))
tmp_union = set(drug_in_clinical_test_lst).union(set(gwas_drug_lst))
final_union = tmp_union.union(set(multi_level_drug_lst))
n = len(final_union)
m = len(final_union.intersection(set(current_adhd_drug_lst)))

#print(N,M,n,m)

#i = 0
#C (n,0)=1
#result = c(20,0)*c(12834,196)/c(12854, 196) = c(12834,196)/c(12854, 196)
#c(12834,196) = 12834*...*12639/196!
#c(12854,196) = 12854*...*12835*...*12659/196!
#c(12834,196)/c(12854, 196) = (12658*...*12639) / (12854*...*12835)

#calculate c(12834,196)/c(12854, 196)
product_1 = np.float64(1)
for i in range(0, 20):
    product_1 *= (12639+i)/(12835+i)
product_1

#i = 1
#C (20,1)=20
#result = 20*c(12834,195)/c(12854, 196) 
#c(12834,195) = 12834*...*12640/195!
#c(12854,196) = 12854*...*12835*...*12659/196!
#c(12834,195)/c(12854, 196) = (12658*...*12640)*196 / (12854*...*12835)

#calculate c(12834,196)/c(12854, 196)
product_2 = np.float64(1)
for i in range(0, 19):
    product_2 *= (12640+i)/(12835+i)
product_2 *= 20*196/12854
product_2

#i = 3
#C (20,2)=190
#result = 190*c(12834,194)/c(12854, 196)
#c(12834,194) = 12834*...*12641/194!
#c(12854,196) = 12854*...*12835*...*12659/196!
#c(12834,194)/c(12854,196) = (12658*...*12641)*196*195 / (12854*...12835)

product_3 = np.float64(1)
for i in range(0, 18):
    product_3 *= (12641+i)/(12835+i)
product_3 *= (190*196*195) / (12854*12853)
product_3

#i=4
#C (20,3)=1140
#result = 1140*c(12834,193)/c(12854, 196)
#c(12834,193) = 12834*...*12642/193!
#c(12854,196) = 12854*...*12835*...*12659/196!
#c(12834,193)/c(12854,196) = (12658*...*12642)*196*195*194 / (12854*...12835)

product_4 = np.float64(1)
for i in range(0, 17):
    product_4 *= (12642+i)/(12835+i)
product_4 *= (1140*196*195*194) / (12854*12853*12852)
product_4

p_value = 1-product_1-product_2-product_3-product_4

print(p_value)